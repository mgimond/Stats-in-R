{
  "hash": "261c6e0c3ad7c5b33465d806ee1b9983",
  "result": {
    "markdown": "---\ntitle: \"Regression analysis (OLS method)\"\n---\n\n\n*Last modified on 2022-09-09*\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nPackages used in this tutorial:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car) \nlibrary(boot) \nlibrary(scatterplot3d) # Used to extract p-value from logistic model\n```\n:::\n\n\n# The simple model\n\nThe objective of statistical modeling is to come up with the most parsimonious model that does a good job in predicting some variable. The simplest  mode is the sample mean. We can express this model as:\n\n\n$$\nY = \\beta_0 + \\varepsilon  \n$$\n\n\nwhere $Y$ is the variable we are trying to predict, $\\beta_0$ is the mean, and $\\varepsilon$ is the difference (or error) between the model, $\\beta_0$, and the actual value $Y$.  How well a model fits the actual data is assessed by measuring the error or deviance between the actual data and the predicted data.\n\nIn the following working example, we will look at the median per capita income for the State of Maine aggregated by state (the data are provided from the US Census ACS 2007 - 2011 dataset). The dollar amounts are adjusted to 2010 inflation dollars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(23663, 20659, 32277, 21595, 27227, \n       25023, 26504, 28741, 21735, 23366, \n       20871, 28370, 21105, 22706, 19527, \n       28321)\n```\n:::\n\n\nNext, we will define the simple model (the mean of all 16 values) for this batch of data:\n\n$\\hat Y = \\beta_0 = \\bar Y =$ 24481 \n\nThe \"hat\" on top of $\\hat Y$ indicates that this is a value _predicted_ by the model and not the actual value $Y$.\n\nWe can plot the true values $Y$ (black dots) along with the values predicted from our simple model $\\hat Y$ (blue dots and lines).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( y  , pch = 16, ylab=NA, mgp=c(4,1,.5) , las=1, bty=\"n\", xaxs=\"i\", xpd = TRUE)\nabline(h = mean(y), col=\"blue\")\npoints(rep(mean(y), length(y)), col=\"blue\", type=\"b\", pch = 21, bg=\"white\", xpd = TRUE)\nmtext(\"Income($)\", side=3, adj= -0.1)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\nThe function `abline` adds a blue horizontal line whose value is $\\bar Y$. Blue dots are added using the `points()` function to highlight the associated predicted values, $\\hat Y$, for each value $Y$. The x-axis serves only to _spread_ out the $Y$ values across its range. The `las = 1` option in the `plot` function sets all axes labels to display horizontally (a value of `0` would set the orientation of all labels parallel to the axis which is the default setting).\n\nOne way to measure the error between the predicted values $\\hat Y$ and $Y$ is to compute the difference (error $\\varepsilon$) between both values.\n\n::: {.cell-output-display}\n|  $Y$  | $\\hat Y$ | $\\varepsilon = Y - \\hat Y$ |\n|:-----:|:--------:|:--------------------------:|\n| 23663 |  24481   |            -818            |\n| 20659 |  24481   |           -3822            |\n| 32277 |  24481   |            7796            |\n| 21595 |  24481   |           -2886            |\n| 27227 |  24481   |            2746            |\n| 25023 |  24481   |            542             |\n| 26504 |  24481   |            2023            |\n| 28741 |  24481   |            4260            |\n| 21735 |  24481   |           -2746            |\n| 23366 |  24481   |           -1115            |\n| 20871 |  24481   |           -3610            |\n| 28370 |  24481   |            3889            |\n| 21105 |  24481   |           -3376            |\n| 22706 |  24481   |           -1775            |\n| 19527 |  24481   |           -4954            |\n| 28321 |  24481   |            3840            |\n:::\n\n\nThe errors (or differences between $Y$ and $\\hat Y$) are displayed as red dashed lines in the following figure:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\nTo get the magnitude of the total error, we could sum  these errors, however, doing so would return a sum of errors of 0 (i.e. the positive errors and negative errors cancel each other out). One solution to circumvent this problem is to take the **absolute** values of the errors  then sum these values (this is also known as the **least absolute error**, **LAE**):\n\n\n$$\nLAE = \\sum \\mid Y - \\hat Y \\mid\n$$\n\n\nHowever, by convention, we quantify the difference between $Y$ and $\\hat Y$ using the **sum of the squared errors** (**SSE**) instead, or\n\n\n$$\nSSE = \\sum (Y - \\hat Y)^2\n$$\n\n\nThe following table shows the difference between LAE and SSE values\n\n\n::: {.cell-output-display}\n|  $Y$  | $\\hat Y$ | $\\mid Y - \\hat Y \\mid$ | $(Y - \\hat Y)^2$ |\n|:-----:|:--------:|:----------------------:|:----------------:|\n| 23663 |  24481   |          818           |      668511      |\n| 20659 |  24481   |          3822          |     14604818     |\n| 32277 |  24481   |          7796          |     60783463     |\n| 21595 |  24481   |          2886          |     8326832      |\n| 27227 |  24481   |          2746          |     7542576      |\n| 25023 |  24481   |          542           |      294171      |\n| 26504 |  24481   |          2023          |     4094046      |\n| 28741 |  24481   |          4260          |     18150795     |\n| 21735 |  24481   |          2746          |     7538457      |\n| 23366 |  24481   |          1115          |     1242389      |\n| 20871 |  24481   |          3610          |     13029393     |\n| 28370 |  24481   |          3889          |     15127238     |\n| 21105 |  24481   |          3376          |     11394844     |\n| 22706 |  24481   |          1775          |     3149294      |\n| 19527 |  24481   |          4954          |     24538401     |\n| 28321 |  24481   |          3840          |     14748480     |\n:::\n\n::: {.cell}\n\n:::\n\n\n$LAE_{mean}$ = 50197  and  $SSE_{mean}$ = 205233706.  \n  \n  \nSquaring the error has the effect of **amplifying** large errors in the dataset. The following figure highlights the difference by drawing the _square_ of the differences as red shaded squares. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\nIt is more natural to visualize a squared amount using a geometric primitive whose area changes proportionately to the squared error changes. Note how the larger error at index 3 has an error line length about 3 times that associated with index 5 (these correspond to the records number three and five in the above table). Yet, the area for index 3 appears almost _9 times_ bigger than that associated with index 5 (as it should since we are _squaring_ the difference). Note too that the unit used to measure the area of each square (the squared error) is the one associated with the _Y_-axis (recall that the error is associated with the prediction of $Y$ and not of $X$).\n\nThis simple model (i.e. one where we are using the mean value to predict $Y$ for each county) obviously has its limits. A more common approach in predicting $Y$ is to use a _predictor_ variable (i.e. a covariate).\n\n# The bivariate regression model\n\nThe bivariate model augments the simple (mean) model by adding a variable, $X$, that is believed to _co-vary_ with $Y$. In other words, we are using another variable (aka, an **independent** or **predictor** variable) to estimate $Y$. This augmented model takes on the form:\n\n\n$$\nY = \\beta_0 + \\beta_1X + \\varepsilon\n$$\n\n\nThis is the equation of a slope where $\\beta_0$ tells us where on the y-axis the slope intersects the axis and $\\beta_1$ is the slope of the line (a positive $\\beta_1$ value indicates that the slope is upward, a negative $\\beta_1$ value indicates that the slope is downward).\n\nContinuing with our example, we will look at the percentage of Mainers having attained a Bachelor's degree or greater by county (the data are provided by the US Census ACS 2007 - 2011 dataset).\n\nThe following block of code defines the new variable $X$ (i.e. fraction of Mainers having attained a bachelor's degree or greater within each county) and visualizes the relationship between income and education attainment using a scatter plot. In the process, a `dataframe` called `dat` is created that stores both $X$ and $Y$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# X represents the fraction of residents in each county having attained a\n# bachelor's degree or better\nx   <- c(0.19, 0.16, 0.40, 0.24, 0.31, 0.24, 0.28, \n         0.31, 0.18, 0.23, 0.17, 0.31, 0.15, 0.25, \n         0.19, 0.28)\n\n# Let's combine Income and Education into a single dataframe\ndat <- data.frame(Income = y, Education = x)\n\n# We will add county names to each row\nrow.names(dat) <- c(\"Androscoggin\", \"Aroostook\", \"Cumberland\", \"Franklin\", \"Hancock\",\n                    \"Kennebec\", \"Knox\", \"Lincoln\", \"Oxford\", \"Penobscot\", \"Piscataquis\",\n                    \"Sagadahoc\", \"Somerset\", \"Waldo\", \"Washington\", \"York\")\n```\n:::\n\n\nThe following displays the contents of our new dataframe `dat`:\n\n\n::: {.cell-output-display}\n|             | Income| Education|\n|:------------|------:|---------:|\n|Androscoggin |  23663|      0.19|\n|Aroostook    |  20659|      0.16|\n|Cumberland   |  32277|      0.40|\n|Franklin     |  21595|      0.24|\n|Hancock      |  27227|      0.31|\n|Kennebec     |  25023|      0.24|\n|Knox         |  26504|      0.28|\n|Lincoln      |  28741|      0.31|\n|Oxford       |  21735|      0.18|\n|Penobscot    |  23366|      0.23|\n|Piscataquis  |  20871|      0.17|\n|Sagadahoc    |  28370|      0.31|\n|Somerset     |  21105|      0.15|\n|Waldo        |  22706|      0.25|\n|Washington   |  19527|      0.19|\n|York         |  28321|      0.28|\n:::\n\n\nNow let's plot the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( Income ~ Education , dat, pch = 16, ylab=NA, mgp=c(4,1,.5) , las=1, bty=\"n\", xaxs=\"i\", \n      xpd = TRUE, xlab=\"Fraction having attained a Bachelor's degree\")\nmtext(\"Income($)\", side=3, adj= -0.1)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\nIt's clear from the figure that there appears to be a positive relationship between income and education attainment. The next step is to _capture_ the nature of this relationship from the perspective of a linear equation. We seek to fit a slope that will minimize the overall distance between the line and the true value, hence we seek $\\beta_0$ and $\\beta_1$ that minimizes the error. The estimate for $\\beta_1$ is sometimes represented as the letter $b_1$ or $\\hat \\beta_1$. We'll stick with the latter notation throughout this exercise. $\\hat \\beta_1$ is estimated using the linear **least squares** technique:\n\n$$\n\\hat \\beta_1 = \\frac{\\sum (X_i - \\bar X)(Y_i-\\bar Y)}{\\sum (X_i-\\bar X)^2}\n$$\n\n\nThe breakdown of the terms in this equation are listed in the following table:\n\n\n\n::: {.cell-output-display}\n|  $X$|   $Y$| $(X - \\bar X)(Y - \\bar Y)$| $(X - \\bar X)^2$|\n|----:|-----:|--------------------------:|----------------:|\n| 0.19| 23663|                     43.436|            0.003|\n| 0.16| 20659|                    317.673|            0.007|\n| 0.40| 32277|                   1223.056|            0.025|\n| 0.24| 21595|                      9.018|            0.000|\n| 0.31| 27227|                    183.664|            0.004|\n| 0.24| 25023|                     -1.695|            0.000|\n| 0.28| 26504|                     74.612|            0.001|\n| 0.31| 28741|                    284.913|            0.004|\n| 0.18| 21735|                    173.318|            0.004|\n| 0.23| 23366|                     14.629|            0.000|\n| 0.17| 20871|                    263.954|            0.005|\n| 0.31| 28370|                    260.102|            0.004|\n| 0.15| 21105|                    314.355|            0.009|\n| 0.25| 22706|                    -12.201|            0.000|\n| 0.19| 19527|                    263.161|            0.003|\n| 0.28| 28321|                    141.614|            0.001|\n|   NA|    NA|                   3553.609|            0.072|\n:::\n\n\nThe bottom of the last two columns show the sums of the numerator and denominator (3553.60875 and 0.0715438 respectively). $\\hat \\beta_1$, the estimated slope, is therefore   3553.61/0.072 or 49670.\n\nKnowing $\\hat \\beta_1$ we can solve for the intercept $b_0$:\n\n$$\n\\hat \\beta_0 = \\hat Y - \\hat \\beta_1 X\n$$\n\n\nIt just so happens that the slope passes through $\\bar Y$ and $\\bar X$. So we can substitute $X$ and $\\hat Y$ in the equation with their respective means: 0.24 and 24481. This gives us $\\hat \\beta_0$ = 12405. Our final linear equation looks like this:\n\n$\\hat Y$ = 12404.5 + 49670.4 $X$ + $\\varepsilon$\n\nIt's no surprise that `R` has a built in function, `lm()`, that will estimate these regression coefficients for us. The function can be called as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM <- lm( y ~ x, dat)\n```\n:::\n\n\nThe output of the linear model is saved to the variable `M`. The formula `y ~ x` tells the function to regress the variable `y` against the variable `x`. You must also supply the name of the table or dataframe that stores these variables (i.e. the dataframe `dat`).\n\nThe regression coefficients $\\hat \\beta_0$ and $\\hat \\beta_1$ computed by `lm` can be extracted from output `M` as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nM$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)           x \n   12404.50    49670.43 \n```\n:::\n:::\n\n\nThe regression coefficients are identical to those computed manually from the table.\n\nWe can also use the model output to add the regression line to our data. The function `abline()` reads the contents of the model output `M` and is smart enough to extract the slope equation for plotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( y ~ x , dat, pch = 16, ylab=NA, mgp=c(4,1,.5) , las=1, bty=\"n\", xaxs=\"i\", xpd = TRUE,\n      xlab=\"Fraction having attained a Bachelor's degree\")\nmtext(\"Income($)\", side=3, adj= -0.1)\nabline(M, col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-14-1.png){width=576}\n:::\n:::\n\n\nNext, we will look at the errors (or residuals) between the estimated values $\\hat Y$ from our model and the true values $Y$ from our observations. We will represent these differences as squared errors:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-15-1.png){width=576}\n:::\n:::\n\n\nNotice how the sizes of the red boxes are smaller then the ones for the simple model (i.e the model defined by the mean $\\bar Y$). In fact, we can sum these squared differences to get our new sum of squared error (SSE) as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSSE <- sum( summary(M)$res^2 )\n```\n:::\n\n\nThis returns an $SSE$  value of 28724435.\n\nThis is less than the sum of squared errors for the _mean_ model $\\bar Y$, $SSE_{mean}$, whose value was 205233705.75. $SSE$ is sometimes referred to as the **residual error**. The difference between the residual  error $SSE$  and $SSE_{mean}$ is the error _explained_ by our new (bivariate) model or the **sum of squares reduced**, $SSR$:\n\n\n$$\nSSR = SSE_{mean} - SSE\n$$\n\n\nIn `R`, this can easily be computed as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSSR <- SSE.mean - SSE\n```\n:::\n\n\ngiving us an $SSR$ value of 176509271.\n\nGraphically, the square root of each squared residual making up $SSR$ represents the distance between the _mean_ model (which is a horizontal line) and the _bivariate_ model (which usually has a none zero slope) for every point. This is _not_ the distance between a point and one of the lines. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-18-1.png){width=576}\n:::\n:::\n\n\nThe linear models are shown in blue lines, the square root of each residual element making up $SSR$ (the difference between the two models) is shown in dashed red lines. Had we shown each _squared_ residual, red boxes would have been drawn as in earlier figures (the boxes were not drawn here to prevent clutter). The take away point here is that  $SSR$ is the error that is explained by the new bivariate model.\n\nThe following table summarizes some of these key error terms:\n\n\n                    Error             Notation\n----------------- ----------------- -----------------------\nMean  model        Total error       $SSE_{mean}$ or $SST$\nBivariate model    Residual error    $SSE$\nBivariate - Mean   Explained error   $SSR$\n\n## Testing if the bivariate model is an improvement over the mean model\n\n### The coefficient of determination, $R^2$\n\nIn this working example, the percent error explained by the bivariate model is,\n\n\n$$\n\\frac{SSE_{mean} - SSE}{SSE_{mean}} \\times 100 = \\frac{SSR}{SSE_{mean}} \\times 100\n$$\n\n\nor (205233706 - 28724435) / 205233706 * 100 = **86.0%**. This is a substantial reduction in error. \n\nThe ratio between $SSR$ and $SSE_{mean}$ is also referred to as the **proportional error reduction score** (also referred to as the **coefficient of determination**), or $R^2$, hence:\n\n\n$$\nR^2 = \\frac{SSR}{SSE_{mean}}\n$$\n\n\n$R^2$ is another value computed by the linear model `lm()` that can be extracted from the output `M` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8600404\n```\n:::\n:::\n\n\nThe $R^2$ value computed by $M$ is the same as that computed manually using the ratio of errors (except that the latter was presented as a percentage and not as a fraction). Another way to describe $R^2$ is to view its value as the fraction of the variance in $Y$ explained by $X$. A $R^2$  value of $0$ implies complete lack of fit of the model to the data whereas a value of $1$ implies perfect fit. In our working example the $R^2$ value of 0.86 implies that the **model explains 86%** of the variance in $Y$.\n\n`R` also outputs $adjusted\\; R^2$, a better measure of overall model fit. It 'penalizes' $R^2$ for the  number of predictors in the model _vis-a-vis_ the number of observations. As the ratio of predictors to number of observation increases, $R^2$ can be artificially inflated thus providing us with a false sense of model fit quality. If the number of predictors to number of observations ratio is small, $adjusted\\; R^2$ will be smaller than $R^2$. $adjusted\\; R^2$ can be extracted from the model output as follows: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M)$adj.r.squared\n```\n:::\n\n\nThe $adjusted\\; R^2$ of **0.85** is very close to our $R^2$ value of **0.86**. So our predictive power hasn't changed given our sample size and one predictor variable.\n\n### The F-ratio test\n\n$R^2$ is one way to evaluate the strength of the linear model. Another is to determine if the reduction in error between the bivariate model and mean model is _significant_. We've already noted a decrease in overall residual errors when augmenting our mean model with a predictor variable $X$ (i.e. the fraction of residents having attained at least a bachelor's degree). Now we need to determine if this difference is significant.\n\nIt helps to conceptualize residual errors as _spreads_ or variances. The following two plots show the errors explained by the model (left) and the errors not explained by the model for each of the 16 data points. Note that we can derive $SSR$ and $SSE$ from the left and right graphs respectively by _squaring_ then _summing_ the horizontal error bars.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-21-1.png){width=576}\n:::\n:::\n\n\nWe want to assess whether the total amount of _unexplained error_ (right) is significantly less than the total amount of _explained error_ (left). We have 16 records (i.e. data for sixteen counties) therefore we have 16 measures of error. Since the model assumes that the errors are the same across the entire range of $Y$ values, we will take the average of those errors; hence we take the average of $SSR$ and the average of $SSE$. However, because these data are from a _subset_ of possible $Y$ values and not _all_ possible $Y$ values we will need to divide $SSR$ and $SSE$ by their respective $degress\\; of\\; freedom$ and not by the total number of records, $n$.  These \"averages\" are called **mean squares** ($MS$) and are computed as follows:\n\n\n$$\nMS_{model} = \\frac{SSR}{df_{model}} =  \\frac{SSR}{parameters\\; in\\; the\\; bivariate\\; model - parameters\\; in\\; the\\; mean\\; model}\n$$\n\n$$\nMS_{residual} = \\frac{SSE}{df_{residual}} = \\frac{SSE}{n - number\\; of\\; parameters}\n$$\n\n\nwhere the $parameters$ are the number of coefficients in the mean model (where there is just one parameter: $\\beta_0 = \\hat Y$) and the number of coefficient in the bivariate model (where there are two parameters: $\\beta_0$ and $\\beta_1$). In our working example, $df_{model}$ = 1 and $df_{residual}$ = 14. \n\nIt's important to remember that these measures of error are measures of **spread** and not of a _central_ value. Since these are measures of spread we use the $F$-test (and _not_ the $t$-test) to determine if the difference between  $MS_{model}$ and $MS_{residual}$ is significant (recall that the $F$ test is used to determine if two measures of spread between samples are significantly different). The $F$ ratio is computed as follows:\n\n\n$$\nF = \\frac{MS_{model}}{MS_{residual}}\n$$\n\n\nA simple way to implement an $F$ test with on our bivariate regression model is to call the `anova()` function as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(M)\n```\n:::\n\n\nwhere the variable `M` is the output from our regression model created earlier. The output of `anova()` is summarized in the following table:\n\n\n::: {.cell-output-display}\n|          | Df |  Sum Sq   |  Mean Sq  | F value  |  Pr(>F)   |\n|:---------|:--:|:---------:|:---------:|:--------:|:---------:|\n|x         | 1  | 176509271 | 176509271 | 86.02884 | 0.0000002 |\n|Residuals | 14 | 28724435  |  2051745  |    NA    |    NA     |\n:::\n\n\nThe first row in the table (labeled as `x`) represents the error terms $SSR$ and $MS_{model}$ for the basic model (the _mean_ model in our case) while the second row labeled `Residuals` represents error terms $SSE$ and $MS_{residual}$ for the current model. The column labeled `Df` displays the degrees of freedom, the column labeled `Sum Sq` displays the sum of squares $SSR$ and $SSE$, the column labeled `Mean Sq` displays the _mean squares_ $MS$ and the column labeled `F value` displays the $F$ ratio $MS_{model}/MS_{residual}$.  \n\nThe larger the $F$ ratio, the greater the difference between the bivariate model and mean model. The question then becomes 'how significant is the observed ratio?'.  To answer this question, we must setup a hypothesis test. We setup the test as follows:\n\n$H_o$: The addition of the term $\\beta_1$ (and hence the predictor $X$) does not improve the prediction of $Y$ over the simple _mean_ model.  \n\n$H_a$: The addition of the term $\\beta_1$ (and hence the predictor $X$) helps improve the prediction of $Y$ over the simple _mean_ model.\n\nThe next step is to determine how likely we are (as a measure of probability) to have a $F$ ratio as large as the one observed under the assumption $H_o$ that the bivariate model does _not_ improve on our prediction of $Y$. The last column in the `anova` output  gives us this probability (as a fraction): $P$ = 0. In other words, there is a 0% chance that we could have computed an $F$ ratio as extreme as ours had the _bivariate_ model not improved over the _mean_ model. \n\nThe following graph shows the frequency distribution of $F$ values we would expect if indeed $H_o$ was true. Most of the values under $H_o$ fall between 0 and 5. The red line to the far right  of the curve is where our observed $F$ value lies along this continuum--this is not a value one would expect to get if $H_o$ were true. It's clear from this output that our _bivariate_ model is a significant improvement over our _mean_ model.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThe F-ratio is not only used to compare the bivariate model to the mean, in fact, it's more commonly used to compare a _two-predictor_ variable model with a _one-predictor_ variable model or a _three-predictor_ model with a _two-predictor_ model and so on. In each case, one model is compared with a similar model _minus_ one predictor variable.\n\nWhen two different models are compared, the function `anova()` requires two parameters: the two regression model outputs (we'll call `M1` and `M2`).\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(M1, M2)\n```\n:::\n\n\nAn example will be provided in a later section when we tackle multivariate regression.  \n\n## Testing if the estimated slope is significantly different from 0\n\nWe've just assessed that our _bivariate_ model is a significant improvement over the much _simpler_ mean model. We can also test if each regression coefficient $\\beta$ is significantly different from 0. If we are dealing with a model that has just one predictor $X$, then the $F$ test just described will also tell us if the regression coefficient $\\beta_1$ is significant. However, if more than one predictor variable is present in the regression model, then you should perform an $F$-test to test _overall_ model improvement, then test each regression term independently for significance.\n\nWhen assessing if a regression coefficient is significantly different from zero, we are setting up yet another hypothesis test where:\n\n$H_o$: $\\beta_1$ = 0 (i.e. the predictor variable _does not_ contribute significantly to the overall improvement of the predictive ability of the model).\n\n$H_a$: $\\beta_1$ < 0 or $\\beta_1$ > 0  for one-tailed test,  or $\\beta_1 \\neq$ 0 for a two-tailed test (i.e. the predictor variable _does_ contribute significantly to the overall improvement of the predictive ability of the model).\n\n\nOur hypothesis in this working example is that the level of education attainment ($X$) can predict per-capita income ($Y$), at least at the county level (which is the level at which our data is aggregated). So what we set out to test is the **null hypothesis**, $H_o$,  that $X$ and $Y$ are **not linearly related**. If $H_o$ is true, then we would expect the regression coefficient $\\beta_1$ to be very close to zero. So this begs the question 'how close should $\\beta_1$ be to 0 for us **not to reject** $H_o$?'\n\nTo answer this question, we need to perform a $t$-test where we compare our calculated regression coefficient $\\hat \\beta_1$ to what we would expect to get if $X$ did not contribute significantly to the model's predictive capabilities. So the statistic $t$ is computed as follows:\n\n\n$$\nt = \\frac{\\hat \\beta_1 - \\beta_{1_o}}{s_{\\hat \\beta_1}}\n$$\n\n\nSince $\\beta_1$ is zero under $H_o$ , we can rewrite the above equation as follows:\n\n$$\nt = \\frac{\\hat \\beta_1 - 0}{s_{\\hat \\beta_1}} = \\frac{\\hat \\beta_1 }{s_{\\hat \\beta_1}}\n$$\n\n\nwhere the estimate $s_{\\hat \\beta_1}$ is the **standard error of $\\beta$** which can be computed from:\n\n\n$$\ns_{\\hat \\beta_1} = \\frac{\\sqrt{MS_{residual}}}{\\sqrt{SSX}}\n$$\n\n\nwhere $SSX$ is the sum of squares of the variable $X$ (i.e. $\\sum (X - \\bar X)^2$) which was computed in an earlier table. \n\nIn our working example, $s_{\\hat \\beta_1}$ is 1432.3914787 / 0.2674766   or $s_{\\hat \\beta_1}$ = 5355.2.  The test statistic $t$ is therefore 49670.43 / 5355.2 or $t$ = 9.28.\n\nNext we need to determine if the computed value of $t$ is significantly different from the values of $t$ expected under $H_o$. The following figure plots the frequency distribution of $\\beta_{1_o}$ (i.e. the kind of $\\beta_1$ values we could expect to get under the assumption that the predictor $X$ does not contribute  to the model) along with the red regions showing where our observed $\\hat \\beta_1$ must lie for us to safely reject $H_o$ at the 5% confidence level (note that because we are performing a two-sided test, i.e. that $\\hat \\beta_1$ is different from 0, the red regions each represent 2.5%; when combined both tails give us a 5% rejection region).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nIt's clear that seeing where our observed $\\hat \\beta_1$ lies along the distribution allows us to be fairly confident that our $\\hat \\beta_1$ is far from being a _typical value_ under $H_o$, in fact we can be quite confident in rejecting the null hypothesis, $H_o$. This implies that $X$ (education attainment) **does** contribute information towards the prediction of $Y$ (per-capita income) when modeled as a _linear_ relationship. \n\nFortunately, we do not need to burden ourselves with all these calculations. The aforementioned standard error, $t$ value and $P$ value are computed as part of the `lm` analysis. You can list these and many other output parameters using the `summary()` function as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M)[[4]]\n```\n:::\n\n\nThe `[[4]]` option displays the pertinent subset of the `summary` output that we want. The content of this output is displayed in the following table:\n\n\n::: {.cell-output-display}\n|            | Estimate | Std. Error | t value  | Pr(>&#124;t&#124;) |\n|:-----------|:--------:|:----------:|:--------:|:------------------:|\n|(Intercept) | 12404.50 |  1350.332  | 9.186264 |     0.0000003      |\n|x           | 49670.43 |  5355.202  | 9.275173 |     0.0000002      |\n:::\n\n\nThe second line of the output displays the value of $\\hat \\beta_1$, its standard error, its $t$-value and the probability of observing a $\\beta_1$ value as extreme as ours under $H_o$.\n\n### Extracting $\\hat \\beta_1$ confidence interval\n\n$\\hat \\beta_1$'s standard error $s_{\\hat \\beta_1}$ can also be used to derive a confidence interval for our estimate. The standard error of **5355** tells us that we can be ~68% confident that our true $\\beta_1$ value lies between  $\\hat \\beta_1$ - 5355  and $\\hat \\beta_1$ + 5355.  We can use the standard error to construct different confidence intervals depending on our desired $\\alpha$ level. The following table shows upper and lower limits for a few common alpha levels:\n\n\n::: {.cell}\n\n:::\n\n\n\nConfidence level $\\alpha$   Lower limit                     Upper limit\n-------------------------- -------------   --------------------------------------------\n68%                         44149                     55192\n95%                         38185                     61156\n99%                         33729                     65612\n\nThe following figure shows the range of the distribution curve covered by the 68% and 95% confidence intervals for our working example. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-30-1.png){width=768}\n:::\n:::\n\n\nThe confidence intervals for $\\hat \\beta_1$ can easily be extracted in `R` using the `confint()` function. for example, to get the confidence interval for an $\\alpha$ of 95%, call the following function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(M, parm = 2, level = 0.95)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     2.5 %  97.5 %\nx 38184.66 61156.2\n```\n:::\n:::\n\n\nThe first parameter, `M`, is the linear regression model output computed earlier. The second parameter `parm = 2` tells `R` which parameter to compute the confidence interval for (a value of `1` means that the confidence interval for the intercept is desired), and the third parameter in the function, `level = 0.95` tells `R` which $\\alpha$ value you wish to compute a confidence interval for.\n\n## Checking the residuals\n\nWe have already used the residuals $\\varepsilon$ to give us and assessment of model fit and the contribution of $X$ to the prediction of $Y$. But the _distribution_ of the residuals can also offer us insight into whether or not all of the following key assumptions are met:\n\n1. The **mean** of the residuals, $\\bar \\varepsilon = 0$, is close to **0**.\n2. The **spread** of the residuals is the same for all values of $X$--i.e. they should be **homoscedastic**.\n3. The probability distribution of the errors follows a **normal (Gaussian)** distribution.\n4. The residuals are **independent** of one another--i.e. they are not **autocorrelated**.\n\nWe will explore each assumption in the following sections.\n\n### Assumption 1:  $\\bar \\varepsilon = 0$\n\nThe `lm` regression model outputs not only parameters as seen in earlier sections, but residuals as well. For each $Y$ value, a residual (or error) accounting for the difference between the model $\\hat Y$ and actual $Y$ value is computed. We can plot the residuals as a function of the predictor variable $X$. We will also draw the line at $\\varepsilon$ = 0 to see how $\\varepsilon$ fluctuates around 0.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(M$residuals ~ x, pch = 16, ylab= \"Residuals\")\nabline(h = 0, lty = 3)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-32-1.png){width=384}\n:::\n:::\n\n\nWe can compute the mean of the residuals, $\\bar \\varepsilon$, as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(M$residuals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.00000000000002131628\n```\n:::\n:::\n\n\nwhich gives us a value very close to zero as expected. \n\n### Assumption 2:  homoscedasticity \n\nIt helps to demonstrate via figures what does and does not constitute a homoscedastic residual:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-34-1.png){width=864}\n:::\n:::\n\n\nThe figure on the left shows no obvious trend in the _variability_ of the residuals as a function of $X$. The middle figure shows an _increase_ in variability of the residuals with increasing $X$. The figure on the right shows a _decrease_ in variability in the residuals with increasing $X$. When the variances of $\\varepsilon$ are not uniform across all ranges of $X$, the residuals are said to be **heteroscedastic**.\n\nOur plot of the residuals from the bivariate model may show some signs of heteroscedasticity, particularly on the right hand side of the graph. When dealing with relatively small samples, a visual assessment of the distribution of the residuals may not be enough to assess whether or not the assumption of homoscedasticity is met. We therefore turn to the **Breusch-Pagan test**. A Breusch-Pagan function, `ncvTest()`, is available in the library `car` which will need to be loaded into our `R` session before performing the test. The package `car` is usually installed as part of the normal `R` installation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\nncvTest(M)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNon-constant Variance Score Test \nVariance formula: ~ fitted.values \nChisquare = 0.2935096, Df = 1, p = 0.58798\n```\n:::\n:::\n\n\nThe Breusch-Pagan tests the (null) hypothesis that the variances are constant across the full range of $X$. The $P$ value tells the likelihood that our distribution of residual variances are consistent with homoscedasticity. A non-significant $P$ value (one usually greater than 0.05) should indicate that our residuals are homoscedastic. Given our high $P$ value of 0.59, we can be fairly confident that we have satisfied our second assumption.\n\n### Assumption 3:  Normal (Gaussian) distribution of residuals\n\nAn important assumption is that the distribution of the residual values follow a normal (Gaussian) distribution. Note that this assumption is **only** needed when computing **confidence intervals** or regression coefficient **$P$-values**. If your interest is solely in finding the best linear _unbiased_ estimator (BLUE), then only the three other assumptions need to be met. \n\nThe assumption of normality of residuals is often confused with the belief that $X$ (the predictor variables) must follow a normal distribution. This is incorrect! The least-squares regression model makes **no** assumptions about the distribution of $X$. However, if the _residuals_ do not follow a normal distribution, then one method of resolving this problem is to transform the values of $X$ (which may be the source of confusion). \n\nIt helps to first plot the histogram of our residuals then to fit a kernel density function to help see the overall trend in distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(M$residuals, col=\"bisque\", freq=FALSE, main=NA)\nlines(density(M$residuals), col=\"red\")\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-36-1.png){width=384}\n:::\n:::\n\n\nA good visual test of normality is the use of a **Q-Q plot**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(M, which = 2)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-37-1.png){width=384}\n:::\n:::\n\n\nWhat we are hoping to see is an alignment of the residual values (hollow points on the plot) along the sloped dashed line. Any deviation from the sloped line may indicate lack of normality in our residuals. You will seldom encounter residuals that fit the line exactly. What you are assessing is whether or not the difference is significant. In our working example, there seems to be disagreement between the distribution of our residuals and the _normal_ line on the plot. \n\nA visual assessment of normality using the  Q-Q plot is usually the preferred approach, but you can also use the **Shapiro-Wilk** test to assess the _significance_ of deviation from normality. But use this test with caution, large sample sizes tend to always indicate deviation from normality, regardless how close they follow the Gaussian curve. `R` has a function called `shapiro.test()` which we can call as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(M$residuals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  M$residuals\nW = 0.92243, p-value = 0.1846\n```\n:::\n:::\n\n\nThe output we are interested in is the $P$-value. The _Shapiro-Wilk Test_ tests the null hypothesis that the residuals come from a normally distributed population. A large $P$-value indicates that there is a good chance that the null is true (i.e. that the residuals are close to being normally distributed). If the $P$ value is small, then there is a good chance that the null is false. Our $P$ value is 0.18 which would indicate that we cannot reject the null. Despite the Shapiro-Welk test telling us that there is a good chance that our $\\varepsilon$ values come from a normally distributed population, our visual assessment of the  Q-Q plot leads us to question this assessment. \n\nAgain, remember that the assumption of normality of residuals really only matters when you are seeking a confidence interval for $\\hat \\beta_1$ or $P$-values.\n\n### Assumption 4: Independence of residuals\n\nOur final assumption pertains to the independence of the residuals. In other words, we want to make sure that a residual value is not auto-correlated with a _neighboring_ residual value. The word _neighbor_ can mean different things. It may refer to the _order_ of the residuals in which case we are concerned with residuals being more similar within a narrow range of $X$, or it may refer to a _spatial_ neighborhood in which case we are concerned with residuals of similar values being _spatially_ clustered. To deal with the former, we can use the **Durbin-Watson** test available in the `R` package `car`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car) # Load this package if not already loaded\ndurbinWatsonTest(M)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n lag Autocorrelation D-W Statistic p-value\n   1      0.01856517      1.706932   0.588\n Alternative hypothesis: rho != 0\n```\n:::\n:::\n\n\nIdeally, the `D-W` statistic returned by the test should fall within the range of 1 to 3. The $P$-value is the probability that our residual distribution is consistent with what we would expect if there was no auto-correlation. Our test statistic of 1.71 and $P$ value of  0.62 suggests that the assumption of independence is met with our model.  You might note that the $P$-value changes every time the tests is re-run. This is because the Durbin Watson test, as implemented in `R`, uses a Monte-Carlo approach to compute $P$. If you want to nail $P$ down to a greater precision, you can add the `reps =` parameter to the function (by default, the test runs 1000 bootstrap replications). For example, you could rerun the test using 10,000 bootstrap replications (`durbinWatsonTest(M, reps = 10000)`).\n\n## Influential Observations\n\nWe want to avoid a situation where a single, or very small subset of points, have a disproportionately large influence on the model results. It is usually best to remove such influential points from the regression analysis. This is not to say that the influential points should be ignored from the overall analysis, but it may suggest that such points may behave differently then the bulk of the data and therefore may require a different model.\n\nSeveral tests are available to determine if one or several points are influential. Two of which are covered here: **Cook's distance** and **hat values**.\n\nCook's distance can be computed from the model using the `cooks.distance()` function. But it's also available as one of `plot.lm`'s diagnostic outputs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( M, which = 4)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-40-1.png){width=384}\n:::\n:::\n\n\nWe could have called the `plot.lm` function, but because `R` recognizes that the object `M` is the output of an `lm` regression, it automatically passes the call to `plot.lm`.  The option `which = 4` tells `R` which of the 6 diagnostic plots to display (to see a list of all diagnostic plots offered, type `?plot.lm`). Usually, any point with a  Cook's distance value **greater than 1** is considered overly influential. In our working example, none of the points are even close to 1 implying that none of our observations wield undue influence.\n\nThe other test that can be used to assess if a point has strong leverage is the **hat values** test.  The technique involves calculating an average leverage value for all data points; this is simply the ratio between the number of regression coefficients in our model (this includes the intercept) and the number of observations. Once the average leverage is computed, we use a cutoff of either twice this average or three times this average (these are two popular cutoff values). We then look for hat values greater then these cutoffs. In the following chunk of code, we first compute the mean leverage values (whose value is assigned to the `cut` object), we then compute the leverage values for each point using the `hatvalues()` function and plot the resulting leverage values along with the two cutoff values (in dashed red lines).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut   <- c(2, 3) * length(coefficients(M)) / length(resid(M))\nM.hat <- hatvalues(M)\nplot(M.hat)\nabline(h = cut, col = \"red\", lty = 2)\ntext( which(M.hat > min(cut) ) ,  M.hat[M.hat > min(cut)] , \n      row.names(dat)[M.hat > min(cut)], pos=4, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-41-1.png){width=384}\n:::\n:::\n\n\nThe last line of code (the one featuring the `text` function) labels only the points having a value greater than the smaller of the two cutoff values.\n\nThe influential point of interest is associated with the third record in our `dat` dataset, Cumberland county. Let's see where the point lies relative to the regression slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Income ~ Education, dat)\nabline(M, col=\"blue\")\npoints(dat[M.hat > min(cut),]$Education, \n       dat[M.hat > min(cut),]$Income, col=\"red\", pch=16) \ntext( dat[M.hat > min(cut),]$Education, \n       dat[M.hat > min(cut),]$Income , \n       labels = row.names(dat)[M.hat > min(cut)], \n      col=\"red\", pos=2) # Add label to the left of point\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-42-1.png){width=384}\n:::\n:::\n\n\nThe point lies right on the line and happens to be at the far end of the distribution. The concern is that this point might have undue leverage potential. It helps to think of the regression line as a long straight bar hinged somewhere near the center. It requires less _force_ to move the bar about the imaginary hinge point when applied to the ends of the bar then near the center of the bar. The _hat values_ test is suggesting that observation number 3 may have unusual leverage potential.  We can assess observation number 3's influence by running a new regression analysis without observation number 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new dataframe that omits observation number 3\ndat.nolev <- dat[ - which(M.hat > min(cut)),]\n\n# Run a new regression analysis\nM.nolev <- lm( Income ~ Education, dat.nolev)\n```\n:::\n\n\nWe can view a full summary of this analysis using the `summary()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M.nolev)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education, data = dat.nolev)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2730.0  -518.1   306.4   819.1  2009.8 \n\nCoefficients:\n            Estimate Std. Error t value   Pr(>|t|)    \n(Intercept)    12408       1670   7.431 0.00000497 ***\nEducation      49654       6984   7.109 0.00000794 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1486 on 13 degrees of freedom\nMultiple R-squared:  0.7954,\tAdjusted R-squared:  0.7797 \nF-statistic: 50.54 on 1 and 13 DF,  p-value: 0.000007942\n```\n:::\n:::\n\n\nYou'll note that the $adjusted\\; R^2$ value drops from 0.85 to 0.78.\n\nIf we compare the estimates (and their standard errors) between both model (see the summary tables below), we'll note that the estimates are nearly identical, however, the standard errors for $\\hat \\beta_1$ increase by almost 30%.\n\nThe original model `M`:\n\n::: {.cell-output-display}\n|            | Estimate | Std. Error | t value | Pr(>&#124;t&#124;) |\n|:-----------|:--------:|:----------:|:-------:|:------------------:|\n|(Intercept) | 12404.50 |  1350.33   |  9.19   |         0          |\n|x           | 49670.43 |  5355.20   |  9.28   |         0          |\n:::\n\n\nThe new model `M.nolev`:\n\n::: {.cell-output-display}\n|            | Estimate | Std. Error | t value | Pr(>&#124;t&#124;) |\n|:-----------|:--------:|:----------:|:-------:|:------------------:|\n|(Intercept) | 12407.93 |  1669.77   |  7.43   |         0          |\n|Education   | 49654.45 |  6984.52   |  7.11   |         0          |\n:::\n\n\nGiven that our estimates are nearly identical, but that the overall confidence in the model decreases with the new model, there seems to be no reason why we would omit the 3rd observation based on this analysis.\n\nThis little exercise demonstrates the need to use as many different tools as possible to evaluate whether an assumption is satisfied or not.\n\n## What to do if some of the assumptions are not met\n\n### Data transformation\n\nData transformation (usually via some non-linear re-expression) may be required when one or more of the following apply:\n  * The residuals are skewed or are heteroscedastic.\n  * When theory suggests.\n  * To force a linear relationship between variables\n  \n**Do not** transform your data if the sole purpose is to \"correct\" for outliers.\n\nWe observed that our residuals did not follow a normal (Gaussian) distribution. Satisfying this assumption is important if we are to use this model to derive confidence intervals around our $\\beta$ estimates or if we are to use this model to compute $P$ values.  We can see if transforming our data will help.  This means re-expressing the $X$ and/or the $Y$ values (i.e. converting each value in $X$ and/or $Y$ by some expression such as `log(x)` or `log(y)`)\n\nIt helps to look at the distribution of the variables (this is something that should normally be done prior to performing a regression analysis). We'll use the `hist()` plotting function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dat$Income, breaks = with(dat, seq(min(Income), max(Income), length.out=5)) )\nhist(dat$Education, breaks = with(dat, seq(min(Education), max(Education), length.out=5)) )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-48-1.png){width=576}\n:::\n:::\n\n\nTwo common transformations are the natural log (implemented as `log` in `R`) and the square. These are special cases of what is called a **Box-Cox** family of transformations.\n\nData transformation is an iterative process which relies heavily on **Exploratory Data Analysis (EDA)** skills. It's important to keep in mind the goal of the transformation. In our example, its purpose is to help improve the symmetry of the residuals. The following figures show different Q-Q plots of the regression residuals for different transformations of $X$ and $Y$.\n\nSeveral data transformation scenarios were explored using square root and logarithmic transformation of the $X$'s and/or $Y$'s. Of course, a thorough analysis would consist of a wide range of Box-Cox transformations.  The scatter plots (along with the regression lines) are displayed on the left hand side for different transformations (the axes labels indicate which, if any, transformation was applied). The accompanying Q-Q plots are displayed to the right of the scatter plots. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nFranklin    Waldo \n       4       14 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Franklin Washington \n         4         15 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Franklin Washington \n         4         15 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Franklin Washington \n         4         15 \n```\n:::\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-49-1.png){width=624}\n:::\n:::\n\n\nA visual assessment of the Q-Q plots indicates some mild improvements near the middle of the residual distribution (note how the mid-points line up nicely with the dashed line), particularly in the second and fourth transformation (i.e. for `log(Income) ~ Education` and `sqrt(Income) ~ Education`).\n\nNote that transforming the data can come at a cost, particularly when interpretation of the results is required. For example, what does a log transformation of Income imply? When dealing with concentrations, it can make theoretical sense to take the log of a value--a good example being the concentration of hydrogen ions in a solution which is usually expressed as a log (pH). It's always good practice to take a step back from the data transformation workflow and assess where your regression analysis is heading.  \n\n### Bootstrapping\n\nIf the assumption of normality of residual is not met, one can overcome this problem by using bootstrapping techniques to come up with regression parameters confidence intervals and $P$-values. The bootstrap technique involves rerunning an analysis, such as the regression analysis in our case, many times, while randomly resampling from our data each time. In concept, we are acting as though our original _sample_ is the actual population and we are sampling, at random (with replacement), from this _pseudo_ population. \n\nOne way to implement a bootstrap is to use the `boot` package's function `boot()`. But before we do, we will need to create our own regression function that will be passed to `boot()`. This custom function will not only compute a regression model, but it will also return the regression coefficients for each simulation. The following block of code defines our new custom function `lm.sim`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.sim <- function(formula, data, i)\n{\n  d.sim <- data [i,]  \n  M.sim <- lm(formula, data=d.sim)\n  return(M.sim$coef)\n}\n```\n:::\n\n\nWe can now use the `boot()` function to run the simulation. Note the call to our custom function `lm.sim` and the number of bootstrap replicates (i.e. `R = 999`). Also, don't forget to load the `boot` library into the current `R` session (if not already loaded).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(boot)\nM.boot <- boot(statistic = lm.sim, formula = Income ~ Education, data=dat, R = 999)\n```\n:::\n\n\nThe results of our bootstrap simulation are now stored in the object `M.boot`. In essence, a new regression line is created for each simulation. In our working example, we created 999 different regression lines. The following plot shows the first 100 regression lines in light grey. Note how they fluctuate about the original regression line (shown in red). The distribution of these slopes is what is used to compute the confidence interval.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-52-1.png){width=384}\n:::\n:::\n\n\nWe can now use the function `boot.ci` (also in the `boot` package) to extract confidence intervals for our $\\beta$ parameters for a given $\\alpha$ confidence value. For example, to get the confidence intervals for the parameters $\\hat \\beta_0$   at a 95% confidence interval, you can type the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot.ci(M.boot, conf = 0.95, type = \"bca\", index=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\nBased on 999 bootstrap replicates\n\nCALL : \nboot.ci(boot.out = M.boot, conf = 0.95, type = \"bca\", index = 1)\n\nIntervals : \nLevel       BCa          \n95%   ( 9933, 14027 )  \nCalculations and Intervals on Original Scale\n```\n:::\n:::\n\n\nNote that your values may differ since the results stem from Monte Carlo simulation. Index `1`, the first parameter in our lm.sim output, is the coefficient for $\\hat \\beta_0$. `boot.ci` will generate many difference confidence intervals. In this example, we are choosing `bca` (adjusted bootstrap percentile).\n\nTo get the confidence interval for $\\hat \\beta_1$ at the 95% $\\alpha$ level just have the function point to index 2:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot.ci(M.boot, conf = 0.95, type=\"bca\", index=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\nBased on 999 bootstrap replicates\n\nCALL : \nboot.ci(boot.out = M.boot, conf = 0.95, type = \"bca\", index = 2)\n\nIntervals : \nLevel       BCa          \n95%   (43317, 58859 )  \nCalculations and Intervals on Original Scale\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThe following table summarizes the 95% confidence interval for $\\hat \\beta_1$ from our simulation. The original confidence interval is displayed for comparison.\n\nModel         $\\hat \\beta_1$ interval\n----------- --------------------------\nOriginal      [44149, 55192]\nBootstrap     [43317, 58859]\n  \n# Multivariate regression model\n\nWe do not need to restrict ourselves to one predictor variable, we can add as many predictor variables to the model as needed (if suggested by theory). But we only do so in the hopes that the extra predictors help account for the unexplained variances in $Y$.\n\nContinuing with our working example, we will add a second predictor variable, `x2`. This variable represents the fraction of the employed civilian workforce employed in a professional field (e.g. scientific, management and administrative industries)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- c(0.079, 0.062, 0.116, 0.055, 0.103, 0.078, \n        0.089, 0.079, 0.067, 0.073, 0.054, 0.094, \n        0.061, 0.072, 0.038, 0.084)\n```\n:::\n\n\nWe will add this new variable to our `dat` dataframe and name the variable `Professional`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$Professional <- x2\n```\n:::\n\n\nWe now have an updated dataframe, `dat`, with a third column.\n\n\n::: {.cell-output-display}\n|             | Income | Education | Professional |\n|:------------|:------:|:---------:|:------------:|\n|Androscoggin | 23663  |   0.19    |    0.079     |\n|Aroostook    | 20659  |   0.16    |    0.062     |\n|Cumberland   | 32277  |   0.40    |    0.116     |\n|Franklin     | 21595  |   0.24    |    0.055     |\n|Hancock      | 27227  |   0.31    |    0.103     |\n|Kennebec     | 25023  |   0.24    |    0.078     |\n|Knox         | 26504  |   0.28    |    0.089     |\n|Lincoln      | 28741  |   0.31    |    0.079     |\n|Oxford       | 21735  |   0.18    |    0.067     |\n|Penobscot    | 23366  |   0.23    |    0.073     |\n|Piscataquis  | 20871  |   0.17    |    0.054     |\n|Sagadahoc    | 28370  |   0.31    |    0.094     |\n|Somerset     | 21105  |   0.15    |    0.061     |\n|Waldo        | 22706  |   0.25    |    0.072     |\n|Washington   | 19527  |   0.19    |    0.038     |\n|York         | 28321  |   0.28    |    0.084     |\n:::\n\n\nLet's rerun our original model, but this time we will call the output of the one predictor model `M1` (this naming convention will help when comparing models).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM1 <- lm(Income ~ Education, dat)\n```\n:::\n\n\nLet's review the summary. This time we'll have `R` display the parameters _and_ the statistics in a single output:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education, data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2730.4  -490.9   249.5   757.9  2008.8 \n\nCoefficients:\n            Estimate Std. Error t value    Pr(>|t|)    \n(Intercept)    12404       1350   9.186 0.000000264 ***\nEducation      49670       5355   9.275 0.000000235 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1432 on 14 degrees of freedom\nMultiple R-squared:   0.86,\tAdjusted R-squared:   0.85 \nF-statistic: 86.03 on 1 and 14 DF,  p-value: 0.0000002353\n```\n:::\n:::\n\n\nThe output should be the same as before.\n\nWe now generate an augmented (i.e. adding a second predictor) regression model, `M2`, as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM2 <- lm( Income ~ Education + Professional, dat)\n```\n:::\n\n\n\nAt this point, it's helpful to visualize what a two-variable model represents. A two-variable model defines the equation of a plane that best fits a 3-D set of points. The regression plane is to a two-variable model what a regression line is to a one-variable model. We can plot the 3-D scatter plot where _x-axis_ = fraction with bachelor's, _y-axis_ = fraction with a professional job and _z-axis_ = income.  We draw the 3-D scatter plot using the function `scatterplot3d()` from the `scatterplot3d()` package. We also add the regression plane to the plot.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scatterplot3d) \ns3d <- scatterplot3d(dat$Education, dat$Professional , dat$Income, \n                     highlight.3d=TRUE, angle=55, scale.y=0.7, pch=16,\n                     xlab = \"Education\", ylab = \"Professional\", zlab=\"Income\")\n\n# Add the 3-D regression plane defined by our model M2\ns3d$plane3d(M2, lty.box=\"solid\")\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n## Reviewing the multivariate regression model summary\n\nWe can, of course, generate a full summary of the regression results as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education + Professional, data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1704.2  -360.6  -202.5   412.8  2006.7 \n\nCoefficients:\n             Estimate Std. Error t value    Pr(>|t|)    \n(Intercept)     10907       1143   9.544 0.000000308 ***\nEducation       29684       7452   3.983     0.00156 ** \nProfessional    84473      26184   3.226     0.00663 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1108 on 13 degrees of freedom\nMultiple R-squared:  0.9223,\tAdjusted R-squared:  0.9103 \nF-statistic: 77.13 on 2 and 13 DF,  p-value: 0.00000006148\n```\n:::\n:::\n\n\nThe interpretation of the model statistics is the same with a multivariate model as it is with a bivariate model. The one difference is that the extra regression coefficient $\\hat \\beta_2$ (associated with the _Professional_ variable) is added to the list of regression parameters. In our example, $\\hat \\beta_2$ is significantly different from $0$ ($P$ = 0.0066). \n\nOne noticeable difference in the summary output is the presence of a **Multiple R-squared** statistic in lieu of the bivariate simple R-squared. Its interpretation is, however, the same and we can note an increase in the models' overall $R^2$ value. The $F$-statistic's $P$ value of $0$ tells us that  the amount of residual error from this multivariate model is significantly less than that of the simpler model, the mean $\\bar Y$. So far, things look encouraging.\n\nThe equation of the modeled plane is thus:\n\n$\\widehat{Income}$ = **10907** + **29684** ($Education$) + **84473** ($Professional$)  \n\n## Comparing the two-variable model with the one-variable model\n\nWe can compare the two-variable model, `M2`, with the one-variable model (the bivariate model), `M1`. Using the `anova()` function.  This test assesses whether or not adding the second variable, `x2`, _significantly_ improves our ability to predict $Y$.  It's important to remember that a good model is a parsimonious one. If an augmented regression model does not significantly improve our overall predictive ability, then we should always revert back to the simpler model. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(M1, M2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: Income ~ Education\nModel 2: Income ~ Education + Professional\n  Res.Df      RSS Df Sum of Sq      F   Pr(>F)   \n1     14 28724435                                \n2     13 15952383  1  12772052 10.408 0.006625 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe $P$ value is very small indicating that the reduction in residual error in model `M2` over model `M1` is significant. Model `M2` looks promising so far.\n\n## Looking for multi-collinearity\n\nWhen adding explanatory variables to a model, one must be very careful not to add variables that explain the same 'thing'. In other words, we don't want (nor need) to have two or more variables in the model explain the **same variance**. One popular  test  for Multi-collinearity is the **Variance Inflation Factor (VIF)** test. The VIF is computed for all regression parameters. For example, VIF for $X_2$ is computed by first regressing $X_1$ against all other predictors (in our example, we would regress $X_1$ against $X_2$) then taking the resulting $R^2$ and plugging it in the following VIF equation:\n\n$$\nVIF = \\frac{1}{1 - R^2_1}\n$$\n\n \nwhere the subscript $1$ in $R^2_1$ indicates that the $R^2$ is for the model `x1 ~ x2`. The VIF for $X_2$ is computed in the same way. \n\nWhat we are avoiding are _large_ VIF values (a _large_ VIF value may indicate high multicollinearity). What constitutes a large VIF value is open for debate. Typical values range from 3 to 10, so VIF's should be interpreted with caution.\n\nWe can use `R`'s `vif()` function to compute VIF for the variables _Education_ and _Professional_ \n\n::: {.cell}\n\n```{.r .cell-code}\nvif(M2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Education Professional \n    3.237621     3.237621 \n```\n:::\n:::\n\n\nThe _moderately high_ VIF should be a warning. It's always good practice to generate a **scatter plot matrix** to _view_ any potential relationship between _all_ variables involved. We can use `R`'s `pairs()` function to display the scatter plots:\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(dat, panel = panel.smooth)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-66-1.png){width=576}\n:::\n:::\n\n\nThe function `pairs()` generates a scatter plot matrix of all columns in the dataframe. Three columns of data are present in our dataframe `dat`, therefore we have a 3x3 scatter plot matrix. We also add a LOWESS smoother (shown as a red polyline in each graph) by calling the option `panel = panel.smooth`. To interpret the output, just match each plot to its corresponding variable along the _x-axis_ and _y-axis_. For example, the scatter plot in the upper right-hand corner is that for the variables _Professional_ and _Income_.  We are interested in seeing how the predictor variables _Education_ and _Professional_ \nrelate to one another. The scatter plot between both predictor variables seem to indicate a significant relationship between the two predictors--this does not bode well for our two-predictor model. The fact that they seem to be correlated suggests that they may be explaining the same variance in $Y$. This means that despite having _promising_ model summary statistics, we cannot trust this model and thus revert back to our bivariate model `M1`.\n\n# Including categorical predictor variables\n\n## Two category variable\n\nSo far, we have worked with continuous variables. We can include categorical variables in our model as well. For example, let's hypothesize that coastal counties might be conducive to higher incomes. We'll create a new variable, `x3`, that will house one of two values, `yes` or `no`, indicating whether or not the county is on the coast or not. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx3 <- c(\"no\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\",\n        \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\")\n```\n:::\n\n\nAlternatively, we could have encoded _access to coast_ as binary values `0` and `1`, but as we'll see shortly, when we have non-numeric variables in a regression model, `R` will recognize such variables as **factors**.\n\nWe will add these values to our `dat` dataframe and name the new variable `Coast`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$Coast <- x3\n```\n:::\n\n\nThe way a categorical variable such as `Coast` is treated in a regression model is by converting categories to binary values. In our example, the variable `Coast` has two categories, `yes` and `no`, which means that one will be coded `0` and the other `1`. You could specify which is to be coded `0` or `1`, or you can let `R` do this for you. Let's run the regression analysis with our new variable (we will not use the variable _Professional_ since we concluded earlier that the variable was redundant).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM3 <- lm( Income ~ Education + Coast, dat = dat)\n```\n:::\n\n\nYou may see a warning message indicating that the variable Coast was converted to a factor (i.e. it was treated as a categorical value). Conversely, if you want to explicitly tell `R` that the variable Coast should be treated as a category, you can enclose that variable in the `as.factor()` function as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM3 <- lm( Income ~ Education + as.factor(Coast), dat = dat)\n```\n:::\n\n\nThe `as.factor` option is important if your categorical variable is numeric since `R` would treat such variable as numeric.\n\nWe can view the full summary as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education + as.factor(Coast), data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3054.9  -548.7   277.0   754.5  2211.3 \n\nCoefficients:\n                    Estimate Std. Error t value   Pr(>|t|)    \n(Intercept)          11861.6     1621.8   7.314 0.00000588 ***\nEducation            53284.9     7882.2   6.760 0.00001341 ***\nas.factor(Coast)yes   -671.7     1054.1  -0.637      0.535    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1464 on 13 degrees of freedom\nMultiple R-squared:  0.8643,\tAdjusted R-squared:  0.8434 \nF-statistic: 41.39 on 2 and 13 DF,  p-value: 0.000002303\n```\n:::\n:::\n\n\nYou'll note that the regression coefficient for _Coast_ is displayed as the variable `Coastyes`, in other words `R` chose one of the categories, `yes` to be coded as `1` for us. The regression model is thus:\n\n$\\widehat{Income}$ = **11862** + **53285** $Education$   **-672** $Coast_{yes}$ \n\nThe last variable is treated as follows: if the county is on the coast, then `Coast` takes on a value of **1**, if not, it takes on a value of **0**. For example, **Androscoggin** county which is _not_ on the coast is expressed as follows where the variable _Coast_ takes on the value of **0**:\n\n$\\widehat{Income}$ = **11862** + **53285** (23663)   **-672** (0) \n\nThe equation for **Cumberland** county which _is_ on the coast is expressed as follows where the variable _Coast_ takes on the value of **1**:\n\n$\\widehat{Income}$ = **11862** + **53285** (32277)   **-672** (1) \n\nTurning our attention to the model summary output, one notices a relatively high $P$-value associated with the _Coast_ regression coefficient. This indicates that $\\beta_2$ is not significantly different from $0$. In fact, comparing this model with model `M1` using `anova()` indicates that adding the _Coast_ variable does not significantly improve our prediction of $Y$ (income). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(M1, M3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: Income ~ Education\nModel 2: Income ~ Education + as.factor(Coast)\n  Res.Df      RSS Df Sum of Sq     F Pr(>F)\n1     14 28724435                          \n2     13 27854540  1    869895 0.406 0.5351\n```\n:::\n:::\n\n\nNote the large $P$ value of 0.54 indicating that $\\beta_{coast}$ does not improve the prediction of $Y$.\n\n## Multi-category variable\n\nFor each category in a categorical variable, there are $(number\\; of\\; categories\\; -1)$ regression variables added to the model. In the previous example, the variable _Coast_ had two categories, _yes_ and _no_, therefore **one** regression parameter was added to the model. If the categorical variable has three categories, then two regression parameters are added to the model. For example, let's split the state of Maine into three zones--east, central and west--we end up with the following explanatory variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx4 <- c(\"W\", \"C\", \"W\", \"W\", \"E\", \"C\", \"C\", \"C\", \"W\", \"C\",\n        \"C\", \"C\", \"W\", \"E\", \"E\", \"W\")\n```\n:::\n\n\nWe'll add this fourth predictor variable we'll call `Geo` to our dataset `dat`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$Geo <- x4\n```\n:::\n\n\nOur table now looks like this:\n\n\n::: {.cell-output-display}\n|             | Income| Education| Professional|Coast |Geo |\n|:------------|------:|---------:|------------:|:-----|:---|\n|Androscoggin |  23663|      0.19|        0.079|no    |W   |\n|Aroostook    |  20659|      0.16|        0.062|no    |C   |\n|Cumberland   |  32277|      0.40|        0.116|yes   |W   |\n|Franklin     |  21595|      0.24|        0.055|no    |W   |\n|Hancock      |  27227|      0.31|        0.103|yes   |E   |\n|Kennebec     |  25023|      0.24|        0.078|no    |C   |\n|Knox         |  26504|      0.28|        0.089|yes   |C   |\n|Lincoln      |  28741|      0.31|        0.079|yes   |C   |\n|Oxford       |  21735|      0.18|        0.067|no    |W   |\n|Penobscot    |  23366|      0.23|        0.073|no    |C   |\n|Piscataquis  |  20871|      0.17|        0.054|no    |C   |\n|Sagadahoc    |  28370|      0.31|        0.094|yes   |C   |\n|Somerset     |  21105|      0.15|        0.061|no    |W   |\n|Waldo        |  22706|      0.25|        0.072|yes   |E   |\n|Washington   |  19527|      0.19|        0.038|yes   |E   |\n|York         |  28321|      0.28|        0.084|yes   |W   |\n:::\n\n\nNow let's run a fourth regression analysis using the variables `Education` and `Geo`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM4 <- lm(Income ~ Education + Geo, dat = dat)\n```\n:::\n\n\nAgain, you might see a warning indicating that the variable `Geo` was flagged as a categorical variable and thus converted to a `factor`.\n\nLet's look at the model summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education + Geo, data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3187.7  -473.2     1.9   642.7  1527.1 \n\nCoefficients:\n            Estimate Std. Error t value    Pr(>|t|)    \n(Intercept)  12579.3     1217.9  10.329 0.000000252 ***\nEducation    50281.5     4630.6  10.858 0.000000146 ***\nGeoE         -1996.4      854.1  -2.337      0.0376 *  \nGeoW           135.8      688.2   0.197      0.8469    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1237 on 12 degrees of freedom\nMultiple R-squared:  0.9106,\tAdjusted R-squared:  0.8882 \nF-statistic: 40.72 on 3 and 12 DF,  p-value: 0.000001443\n```\n:::\n:::\n\n\nAs expected, the model added **two** regression parameters, one is called `GeoE` for counties identified as being on the east side of the state and `GeoW` for the counties identified as being on the west side of the state. Here are three examples showing how the equation is to be interpreted with different east/central/west designations.\n\nFor **Androscoggin** county, its location lies to the west, therefore the variable `GeoE` is assigned a value of 0 and `GeoW` is assigned a value of `1`:\n\n$\\widehat{Income}$ = **12579** + **50282** (23663)  **-1996** (0)  + **136** (1)\n\nFor **Hancock** county, its location lies to the east, therefore the variable `GeoE` is assigned a value of **1** and `GeoW` is assigned a value of **0**:\n\n$\\widehat{Income}$ = **12579** + **50282** (27227)  **-1996** (1)  + **136** (0)\n\nFor **Kennebec** county, its location lies in the center of the state, therefore **both** variables `GeoE` and `GeoW` are assigned a value of **0**:\n\n$\\widehat{Income}$ = **12579** + **50282** (25023)  **-1996** (0)  + **136** (0)\n\nTurning to the model summary results, it appears that one of the new regression coefficients, $\\beta_{GeoE}$ is significantly different from 0 whereas that of $\\beta_{GeoW}$ is not. This seems to suggest that Eastern counties might differ from other counties when it comes to per-capita income. We can aggregate the western and central counties into a single category and end up with a two category variable, i.e one where a county is either on the eastern side of the state or is not. We will use the `recode()` function to reclassify the values and add the new codes to our `dat` dataframe as a new variable we'll call `East`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$East <- recode(dat$Geo, \" 'W' = 'No' ; 'C' = 'No' ; 'E' = 'Yes' \")\n```\n:::\n\n\nLet's look at our augmented table.\n\n::: {.cell-output-display}\n|             | Income| Education| Professional|Coast |Geo |East |\n|:------------|------:|---------:|------------:|:-----|:---|:----|\n|Androscoggin |  23663|      0.19|        0.079|no    |W   |No   |\n|Aroostook    |  20659|      0.16|        0.062|no    |C   |No   |\n|Cumberland   |  32277|      0.40|        0.116|yes   |W   |No   |\n|Franklin     |  21595|      0.24|        0.055|no    |W   |No   |\n|Hancock      |  27227|      0.31|        0.103|yes   |E   |Yes  |\n|Kennebec     |  25023|      0.24|        0.078|no    |C   |No   |\n|Knox         |  26504|      0.28|        0.089|yes   |C   |No   |\n|Lincoln      |  28741|      0.31|        0.079|yes   |C   |No   |\n|Oxford       |  21735|      0.18|        0.067|no    |W   |No   |\n|Penobscot    |  23366|      0.23|        0.073|no    |C   |No   |\n|Piscataquis  |  20871|      0.17|        0.054|no    |C   |No   |\n|Sagadahoc    |  28370|      0.31|        0.094|yes   |C   |No   |\n|Somerset     |  21105|      0.15|        0.061|no    |W   |No   |\n|Waldo        |  22706|      0.25|        0.072|yes   |E   |Yes  |\n|Washington   |  19527|      0.19|        0.038|yes   |E   |Yes  |\n|York         |  28321|      0.28|        0.084|yes   |W   |No   |\n:::\n\n\nAt this point, we could run a new regression with this variable, but before we do, we will control which category from the variable `East` will be assigned the **reference** category in the regression model as opposed to letting `R` decide for us. To complete this task, we will use the function `factor()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$East <- factor(dat$East, levels = c(\"No\", \"Yes\"))\n```\n:::\n\n\nThis line of code does three things: it explicitly defines the variable `East` as a factor, it explicitly defines the two categories, `No` and `Yes`,  and it sets the order of these categories (based on the order of the categories defined in the `level` option). The latter is important since the regression function `lm` will assign the first category in the level as the reference.  \n\nWe are now ready to run the regression analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM5 <- lm(Income ~ Education + East, dat)\n```\n:::\n\n\nLet's view the regression model summary.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(M5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Income ~ Education + East, data = dat)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3114.59  -454.21     5.88   614.49  1600.85 \n\nCoefficients:\n            Estimate Std. Error t value     Pr(>|t|)    \n(Intercept)  12646.2     1125.6  11.235 0.0000000459 ***\nEducation    50264.0     4455.3  11.282 0.0000000437 ***\nEastYes      -2058.9      763.3  -2.697       0.0183 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1190 on 13 degrees of freedom\nMultiple R-squared:  0.9103,\tAdjusted R-squared:  0.8965 \nF-statistic: 65.93 on 2 and 13 DF,  p-value: 0.0000001564\n```\n:::\n:::\n\n\nThis model is an improvement over the model `M1` in that a bit more of the variance in $Y$ is accounted for in `M5` as gleaned from the higher $R^2$ value. We also note that **all** regression coefficients are significantly different from 0. This is a good thing. The negative regression coefficient $\\hat {\\beta_2}$ tells us that income is negatively related to the East-other designation. In other words, income tends to be less in eastern counties than in other counties.\n\nNow let's look at the `lm` summary plots to see if the assumptions pertaining to the residuals are met:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOP <- par(mfrow = c(2,2))\nplot(M5, which = c(1:4))\npar(OP)\n```\n\n::: {.cell-output-display}\n![](regression_files/figure-html/unnamed-chunk-83-1.png){width=720}\n:::\n:::\n\n\nYou may recall back when we looked at the residuals for model `M1` that the Q-Q plot showed residuals near the tails of the distribution that diverged from the theoretical distribution. It appears that this divergence near the ends of the distribution is under control--that's a good thing. There is also no strong evidence of heteroscadisticy and the Cooks' Distance indicates that there is no disproportionately influential points (all values are less than 1).\n\nBear in mind that the geographic designation of East vs. Others may have more to do with factors associated with the two eastern most counties than actual geographic location. It may well be that our variable `East` is nothing more than a latent variable, but one that may shed some valuable insight into the prediction of $Y$.\n\nReferences\n==========================\nFreedman D.A., Robert Pisani, Roger Purves. _Statistics_, 4th edition, 2007.  \nMillard S.P, Neerchal N.K., _Environmental Statistics with S-Plus_, 2001.  \nMcClave J.T., Dietrich F.H., _Statistics_, 4th edition, 1988.  \nVik P., _Regression, ANOVA, and the General Linear Model: A Statistics Primer_, 2013.\n\n**Session Info**:\n\n\n::: {.cell-output-display}\n**R version 4.2.1 (2022-06-23 ucrt)**\n\n**Platform:** x86_64-w64-mingw32/x64 (64-bit) \n\n\n**attached base packages:** \n_stats_, _graphics_, _grDevices_, _utils_, _datasets_, _methods_ and _base_\n\n**other attached packages:** \n_gplots(v.3.1.3)_, _scatterplot3d(v.0.3-41)_, _boot(v.1.3-28)_, _car(v.3.1-0)_ and _carData(v.3.0-5)_\n\n**loaded via a namespace (and not attached):** \n_Rcpp(v.1.0.9)_, _rstudioapi(v.0.14)_, _Rttf2pt1(v.1.3.8)_, _knitr(v.1.40)_, _magrittr(v.2.0.3)_, _MASS(v.7.3-57)_, _xtable(v.1.8-4)_, _rlang(v.1.0.4)_, _fastmap(v.1.1.0)_, _stringr(v.1.4.1)_, _highr(v.0.9)_, _caTools(v.1.18.2)_, _tools(v.4.2.1)_, _xfun(v.0.32)_, _KernSmooth(v.2.23-20)_, _cli(v.3.3.0)_, _extrafontdb(v.1.0)_, _htmltools(v.0.5.3)_, _gtools(v.3.9.3)_, _yaml(v.2.3.5)_, _abind(v.1.4-5)_, _digest(v.0.6.29)_, _bitops(v.1.0-7)_, _evaluate(v.0.16)_, _rmarkdown(v.2.16)_, _stringi(v.1.7.8)_, _pander(v.0.6.5)_, _compiler(v.4.2.1)_, _extrafont(v.0.18)_ and _jsonlite(v.1.8.0)_\n:::\n\n\n\n[1]: http://www.amstat.org/sections/srms/pamphlet.pdf\n",
    "supporting": [
      "regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}